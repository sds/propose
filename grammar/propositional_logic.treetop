# Defines the grammar for propositional logic formulas.
grammar PropositionalLogic
  rule statement
    sequent
    /
    formula
  end

  rule formula
    implication
    /
    disjunction
    /
    conjunction
    /
    unit
  end

  rule not
    _? ('not' _ / '!' / '¬') _?
  end

  rule conjunction
    left:unit and right:(conjunction / unit) {
      def to_ast
        Propose::Tree::Conjunction.new(left.to_ast, right.to_ast)
      end
    }
  end

  rule and
    _ 'and' _
    /
    _? ('∧' / '&') _?
  end

  rule disjunction
    left:(conjunction / unit) or right:(disjunction / conjunction / unit) {
      def to_ast
        Propose::Tree::Disjunction.new(left.to_ast, right.to_ast)
      end
    }
  end

  rule or
    _ 'or' _
    /
    _? ('∨' / '|') _?
  end

  rule implication
    left:(disjunction / conjunction / unit) imply right:formula {
      def to_ast
        Propose::Tree::Implication.new(left.to_ast, right.to_ast)
      end
    }
  end

  rule imply
    _? ('=>' / '->') _?
    /
    _ ('imply' / 'implies') _
  end

  rule unit
    literal
    /
    bracketed_formula
    /
    not bracketed_formula {
      def to_ast
        Propose::Tree::Negation.new(bracketed_formula.to_ast)
      end
    }
  end

  rule bracketed_formula
    '(' _? formula _? ')' {
      def to_ast
        formula.to_ast
      end
    }
  end

  rule literal
    not atom {
      def to_ast
        Propose::Tree::Negation.new(atom.to_ast)
      end
    }
    /
    atom
    /
    verum
    /
    falsum
  end

  rule atom
    !(not / proves) name:[a-z]+ {
      def to_ast
        Propose::Tree::Atom.new(name.text_value.to_sym)
      end
    }
  end

  rule verum
    'T' {
      def to_ast
        Propose::Tree::Verum.instance
      end
    }
  end

  rule falsum
    'F' {
      def to_ast
        Propose::Tree::Falsum.instance
      end
    }
  end

  rule sequent
    premises:premise_list proves conclusion:formula {
      def to_ast
        Propose::Tree::Sequent.new(premises.to_a, conclusion.to_ast)
      end
    }
    /
    proves formula {
      def to_ast
        Propose::Tree::Sequent.new([], formula.to_ast)
      end
    }
  end

  rule proves
    _? 'proves' _
    /
    _? ('⊢' / '|-') _?
  end

  rule premise_list
    premise:formula comma list:premise_list {
      def to_a
        [premise.to_ast] + list.to_a
      end
    }
    /
    premise:formula {
      def to_a
        [premise.to_ast]
      end
    }
  end

  rule comma
    _? ',' _?
  end

  rule _
    [\s]+
  end
end
